package org.model.dao;

// Generated 16/08/2014 01:49:33 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import org.hibernate.annotations.OptimisticLock;
import org.hibernate.annotations.Type;

/**
 * Moneda generated by hbm2java
 */
@Entity
@Table(name = "MONEDA", uniqueConstraints = { @UniqueConstraint(columnNames = "CODIGO"), @UniqueConstraint(columnNames = "SIMBOLO"), @UniqueConstraint(columnNames = "DENOMINACION") })
public class Moneda implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private String codigo;
	private String simbolo;
	private String denominacion;
	private boolean estado;
	private Set valorTasaIntereses = new HashSet(0);
	private Set tasaCambiosForIdMonedaDestino = new HashSet(0);
	private Set tasaCambiosForIdMonedaOrigen = new HashSet(0);

	private Date version;

	public Moneda() {
	}

	@Id
	@Column(name = "CODIGO", unique = true, nullable = false, length = 3)
	public String getCodigo() {
		return this.codigo;
	}

	public void setCodigo(String codigo) {
		this.codigo = codigo;
	}

	@Column(name = "SIMBOLO", unique = true, nullable = false, length = 3)
	public String getSimbolo() {
		return this.simbolo;
	}

	public void setSimbolo(String simbolo) {
		this.simbolo = simbolo;
	}

	@Column(name = "DENOMINACION", unique = true, nullable = false, length = 30)
	public String getDenominacion() {
		return this.denominacion;
	}

	public void setDenominacion(String denominacion) {
		this.denominacion = denominacion;
	}

	@Type(type = "org.hibernate.type.TrueFalseType")
	@Column(name = "ESTADO", nullable = false)
	public boolean isEstado() {
		return estado;

	}

	public void setEstado(boolean estado) {
		this.estado = estado;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "moneda")
	@OptimisticLock(excluded = true)
	public Set<ValorTasaInteres> getValorTasaIntereses() {
		return this.valorTasaIntereses;
	}

	public void setValorTasaIntereses(Set valorTasaIntereses) {
		this.valorTasaIntereses = valorTasaIntereses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "monedaByIdMonedaDestino")
	public Set<TasaCambio> getTasaCambiosForIdMonedaDestino() {
		return this.tasaCambiosForIdMonedaDestino;
	}

	public void setTasaCambiosForIdMonedaDestino(Set tasaCambiosForIdMonedaDestino) {
		this.tasaCambiosForIdMonedaDestino = tasaCambiosForIdMonedaDestino;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "monedaByIdMonedaOrigen")
	public Set<TasaCambio> getTasaCambiosForIdMonedaOrigen() {
		return this.tasaCambiosForIdMonedaOrigen;
	}

	public void setTasaCambiosForIdMonedaOrigen(Set tasaCambiosForIdMonedaOrigen) {
		this.tasaCambiosForIdMonedaOrigen = tasaCambiosForIdMonedaOrigen;
	}

	@Version
	@Temporal(value = TemporalType.TIMESTAMP)
	@Column(name = "OPTLOCK")
	public Date getVersion() {
		return this.version;
	}

	public void setVersion(Date version) {
		this.version = version;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((codigo == null) ? 0 : codigo.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Moneda other = (Moneda) obj;
		if (codigo == null) {
			if (other.codigo != null)
				return false;
		} else if (!codigo.equals(other.codigo))
			return false;
		return true;
	}

}
